{
  "name": "Project1",
  "tagline": "project1 of liyunzhi",
  "body": "[project1](https://github.com/projectforlyz/project1)\r\n\r\nRun the program with the txt called sample. Then you will get an input txt and get the final result you want. However, our code can only identy space instead of enter. So we should adjust each paragraph to get the output. Let's take the following word for example.\r\nThe actual Enumeration shall be made within three Years after the first Meeting of the Congress of the United States, and within every subsequent Term of ten Years, in such Manner as they shall by Law direct. The Number of Representatives shall not exceed one for every thirty Thousand, but each State shall have at Least one Representative; and until such enumeration shall be\r\nmade, the State of New Hampshire shall be entitled to choose three,Massahusetts eight, Rhode Island and Providence Plantations one, Connecticut five, New York six, New Jersey four, Pennsylvania eight, Delaware one, Maryland\r\nsix, Virginia ten, North Carolina five, South Carolina five and Georgia three.\r\nRun the program with the sample.txt and see what you will get.\r\nHere comes the our code:\r\n\r\n#define N 1\r\n#define MAX 10000\r\n#include&lt;iostream&gt;\r\n#include&lt;string&gt;\r\n#include&lt;deque&gt;\r\n#include&lt;vector&gt;\r\n#include&lt;map&gt;\r\n#include&lt;stdlib.h&gt;\r\n#include&lt;ctime&gt;\r\n#include&lt;sstream&gt;\r\n#include&lt;fstream&gt;\r\nusing namespace std;\r\ntypedef deque&lt;string&gt; Prefix;\r\ntypedef vector&lt;string&gt; Postfix;\r\ntypedef map&lt;Prefix, Postfix&gt; mapping_table;\r\n\r\nchar fake_prefix[] = \"\\n\";\r\n\r\nvoid add_post(Prefix &pre, mapping_table &tab, const string &s)\r\n{\t\r\n\tif (pre.size() == N)\r\n\t{\r\n\t\ttab[pre].push_back(s);\r\n\t\tpre.pop_front();\r\n\t}\r\n\tpre.push_back(s);\r\n}\r\n\r\nvoid build_samp(Prefix &pre, mapping_table &tab, istream &in)\r\n{\r\n\tstring cur_word;\r\n\twhile (in &gt;&gt; cur_word)\r\n\t{\r\n\t\tadd_post(pre, tab, cur_word);\r\n\t}\r\n}\r\n\r\nvoid generate_sentence( mapping_table &tab)\r\n{\r\n\tsrand(time(NULL));\r\n\tPrefix prefix;\r\n\tfor (int i = 0; i &lt; N; i++)\r\n\t{\r\n\t\tadd_post(prefix,tab,fake_prefix);\r\n\t}\r\n\tfor (int i = 0; i &lt; MAX; i++)\r\n\t{\r\n\t\tPostfix cur_post = tab[prefix];\r\n\t\tconst string &w = cur_post[rand() % cur_post.size()];\r\n\t\tif (w == \"\\n\") break;\r\n\t\tcout &lt;&lt; w&lt;&lt;\" \";\r\n\t\tprefix.pop_front();\r\n\t\tprefix.push_back(w);\r\n\t}\r\n\tcout &lt;&lt; endl;\r\n}\r\n\r\nvoid main()\r\n{\r\n\tPrefix pre_;\r\n\tmapping_table table_;\r\n\tfor (int i = 0; i &lt; N; i++)\r\n\t{\r\n\t\tadd_post(pre_, table_, fake_prefix);\r\n\t}\r\n\t//string sample_swntence = \"my name is SongYang, my name is LiSiqi,my name is zuiniubi\";\r\n\tstring sample_sentence;\r\n\tifstream fin(\"sample.txt\");\r\n\tif (fin)\r\n\t{\r\n\t\tgetline(fin, sample_sentence);\r\n\t}\t\r\n\telse\r\n\t{\r\n\t\tcout &lt;&lt; \"can't find the file\"&lt;&lt;endl;\r\n\t}\r\n\tistringstream in(sample_sentence);\r\n\tbuild_samp(pre_, table_, in);\r\n\tadd_post(pre_, table_, fake_prefix);\r\n\tgenerate_sentence(table_);\r\n\tsystem(\"pause\");\r\n}\r\nWe can tell from the result the backward word is choosen randomly after the forward word.\r\nBasically, after the program scan all the text in the sample. It will remember which words have appeared after \"the\", just for example. Then while it's generating the text, it will choosen a word randomly from the words remebered in the forward step.\r\nSo we can get different results.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}